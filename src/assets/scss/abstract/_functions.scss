@use 'sass:math';
@use 'variables' as *;

// 루트 요소 기본 단위 --------------------------------------------------------------- /
// $root-value:10px!default;

// // 단위 제거 함수 ------------------------------------------------------------------ /
// @function removeUnit($value){
//   @return math.div($value, $value * 0 + 1) ;
// }

// // px을 rem 단위로 변경하는 함수 ------------------------------------------------------- /
// @function rem($value, $base: $root-value){
//   @return (removeUnit(math.div($value, $base))) * 1rem;
// }


// // // px을 em 단위로 변경하는 함수 ------------------------------------------------------- /
// @function em($value, $base: $root-value){
//   @return (removeUnit(math.div($value, $base))) * 1em;
// }



// 기본단위 rem/
// @function rem($px) {
//   @return #{calc($px / 10)}rem;
// }

@function rem($px) {
  @return #{calc($px)}rem;
}



// 호버액션 아이콘  < 는 %3C 로, > 는 %3E, # 대신 %23 로 치환
$_default-color:555;

@function svg-image($icon-name, $color:$_default-color){
  $icon-list :(
    outlink:"%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='none' stroke='%23#{$color}' stroke-width='2' stroke-miterlimit='10' d='M4.1,2.5h5.4v5.3'%3E%3C/path%3E%3Cpath fill='none' stroke='%23#{$color}' stroke-width='2' stroke-miterlimit='10' d='M8.9,3.2L2.2,9.8'%3E%3C/path%3E%3C/svg%3E",
    chevron:"%3Csvg width='8' height='12' viewBox='0 0 8 12' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 11L6 5.93671L1 1' stroke='%23#{$color}' stroke-width='2' stroke-miterlimit='10'%3E%3C/path%3E%3C/svg%3E",
    arrow-right:"%3Csvg xmlns='http://www.w3.org/2000/svg' width='5' height='10' viewBox='0 0 5 10' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M0.462363 1.12838C0.257337 1.3334 0.257338 1.66582 0.462363 1.87084L3.59113 4.99961L0.462363 8.12838C0.257338 8.3334 0.257338 8.66581 0.462363 8.87084C0.667389 9.07587 0.9998 9.07587 1.20483 8.87084L4.70482 5.37084C4.90985 5.16581 4.90985 4.8334 4.70482 4.62838L1.20482 1.12838C0.999799 0.923353 0.667388 0.923353 0.462363 1.12838Z' fill='%23#{$color}'/%3E%3C/svg%3E",
    plus :"%3Csvg xmlns='http://www.w3.org/2000/svg' width='11' height='12' viewBox='0 0 11 12' fill='none'%3E%3Cpath d='M5.5 0.5V11.5' stroke='%23#{$color}' stroke-width='1.5'/%3E%3Cpath d='M0 6L11 6' stroke='%23#{$color}' stroke-width='1.5'/%3E%3C/svg%3E",
  );
  $icon: map-get($icon-list, $icon-name);
  @return url("data:image/svg+xml;charset=utf8,#{$icon}");
}


$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

@function color-contrast(
	$background, 
	$color-contrast-dark: $color-contrast-dark, 
	$color-contrast-light: $color-contrast-light, 
	$min-contrast-ratio: $min-contrast-ratio,
	) {
  $foregrounds: $color-contrast-light, //전경색
	$color-contrast-dark, $white, $black;
  $max-ratio: 0; // 최대비율
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);
    @if $contrast-ratio > $min-contrast-ratio {
      // 최소  대조값 4.5보다크면 $color값 반환
      @return $color;
    } @else if $contrast-ratio > $max-ratio {
      // 0보다 크면
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
    
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, divide($l1 + .05, $l2 + .05), divide($l2 + .05, $l1 + .05));
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $rgb: (
    "r": red($color),
    "g": green($color),
    "b": blue($color)
  );

  @each $name, $value in $rgb {
    $value: if(divide($value, 255) < .03928, divide(divide($value, 255), 12.92), nth($_luminance-list, $value + 1));
    $rgb: map-merge($rgb, ($name: $value));
  }

  @return (map-get($rgb, "r") * .2126) + (map-get($rgb, "g") * .7152) + (map-get($rgb, "b") * .0722);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100%);
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

// Shade a color: mix a color with black
@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}
// scss-docs-end color-functions

// Return valid calc
@function add($value1, $value2, $return-calc: true) {
  @if $value1 == null {
    @return $value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 + $value2;
  }

  @if type-of($value1) != number {
    $value1: unquote("(") + $value1 + unquote(")");
  }

  @if type-of($value2) != number {
    $value2: unquote("(") + $value2 + unquote(")");
  }

  @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 == null and $value2 == null {
    @return null;
  }

  @if $value1 == null {
    @return -$value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 - $value2;
  }

  @if type-of($value1) != number {
    $value1: unquote("(") + $value1 + unquote(")");
  }

  @if type-of($value2) != number {
    $value2: unquote("(") + $value2 + unquote(")");
  }

  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);
  $divisor: abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: unit($dividend);
  $divisor-unit: unit($divisor);
  $unit-map: (
    "px": 1px,
    "rem": 1rem,
    "em": 1em,
    "%": 1%
  );
  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
    $result: $result * map-get($unit-map, $dividend-unit);
  }
  @return $result;
}
